#!/usr/bin/env bash


# - - - - -  actions - - - - - #

git_local_branches() {
	git branch --no-color | sed 's/^[* ] //'
}

git_merged_branches() {
	git branch --no-color --merged | sed 's/^[* ] //'
}

git_remote_branches() {
	git branch -r --no-color | sed 's/^[* ] //'
}

git_all_branches() {
	( git branch --no-color; git branch -r --no-color) | sed 's/^[* ] //'
}

git_all_tags() {
	git tag
}

git_diff() {
	git diff "$1" "$2" --no-color
}

git_current_branch() {
	git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
	# todo - consider this implementation instead:
#	git rev-parse --abbrev-ref HEAD
}

git_prune() {
	git remote prune origin >/dev/null 2>&1
}

git_checkout() {
	git checkout "$1" >/dev/null 2>&1
}

git_delete_local_branch() {
	git branch -D "$1" >/dev/null 2>&1
}

git_delete_remote_branch() {
	git push origin :"$1" >/dev/null 2>&1
}

git_pull() {
	git pull >/dev/null 2>&1
}

git_pull_origin() {
	git pull origin "$1" >/dev/null 2>&1
}

git_push() {
	git push origin "$1" >/dev/null 2>&1
}

git_create_branch() {
	local remote="${2:+origin/$2}" # remote is optional
	git checkout -b "$1" ${remote} >/dev/null 2>&1
}

git_push_set_upstream() {
	git push --set-upstream origin "$1" >/dev/null 2>&1
}

git_merge() {
	git merge --no-edit "$1" >/dev/null 2>&1
}

git_create_tag() {
	git tag -a "$1" -m "$2" >/dev/null 2>&1
}

git_last_commit_message() {
	git log ${1} --no-merges --format=%s -1
}

git_repo_origin() {
	git config --get remote.origin.url
}

git_repo_user() {
	git_repo_origin | url_last_path_seg
}

git_repo_domain() {
	git_repo_origin | url_domain
}

git_repo_name() {
	basename "$(git rev-parse --show-toplevel)"
}


# - - - - -  predicates - - - - - #

git_is_clean_working_tree() {
	if ! git diff --no-ext-diff --ignore-submodules --quiet --exit-code; then
		return 1
	elif ! git diff-index --cached --quiet --ignore-submodules HEAD --; then
		return 2
	else
		return 0
	fi
}

git_repo_is_headless() {
	! git rev-parse --quiet --verify HEAD >/dev/null 2>&1
}

git_repo_is_empty() {
	[[ -z $(git_local_branches) && -z $(git_remote_branches) ]]
}

git_can_prune() {
	( git remote prune origin --dry-run)
}

git_local_branch_exists() {
	has $1 $(git_local_branches)
}

git_remote_branch_exists() {
	if [[ -n $(git_can_prune) ]]; then
		git_prune
	fi
	has "origin/$1" $(git_remote_branches)
}

git_branch_exists() {
	has $1 $(git_all_branches)
}

git_tag_exists() {
	has $1 $(git_all_tags)
}

git_is_different() {
	is $(git_diff "$@")
}

git_is_merged() {
	has $1 $(git_merged_branches)
}


# - - - - -  verbose actions - - - - - #

git_v_checkout() {
	local branch="$1"
	io_log "checking out '$branch'..."
	git_checkout "$branch"
	io_status_logger $? "checked out" "checkout failed"
}

git_v_delete_local_branch() {
	local branch="$1"
	io_log "deleting the '$branch' local branch..."
	git_delete_local_branch "$branch"
	io_status_logger $? "deleted ok" "delete failed"
}

git_v_delete_remote_branch() {
	local branch="$1"
	io_log "deleting the '$branch' remote branch..."
	git_delete_remote_branch "$branch"
	io_status_logger $? "deleted ok" "delete failed"
}

git_v_pull() {
	io_log "pulling from the remote..."
	git_pull
	io_status_logger $? "pulled ok" "pull failed"
}

git_v_push() {
	local ref="$1" # ref can be 'branch' or 'tag'
	io_log "pushing '$ref' to the remote..."
	git_push "$ref"
	io_status_logger $? "pushed ok" "push failed"
}

git_v_create_branch() {
	local branch="$1"; local remote="$2"
	io_log "creating the '$branch' local branch..."
	git_create_branch "$branch" "$remote"
	io_status_logger $? "created and checked out" "create failed"
}

git_v_push_set_upstream() {
	local branch="$1"
	io_log "pushing '$branch' to the remote and setting upstream..."
	git_push_set_upstream "$branch"
	io_status_logger $? "pushed ok, upstream set" "push upstream failed"
}

git_v_ensure_branch() {
	local branch="$1"
	if git_local_branch_exists "$branch" && git_remote_branch_exists "$branch"; then
		return 0
	fi
	if git_remote_branch_exists "$branch"; then
		git_v_create_branch "$branch" "$branch"
	else
		if ! git_local_branch_exists "$branch"; then
			git_v_create_branch "$branch"
		fi
		git_v_push_set_upstream "$branch"
	fi
}

git_v_ensure_no_branch() {
	local branch="$1"
	if ! git_local_branch_exists "$branch" && ! git_remote_branch_exists "$branch"; then
		return 0
	fi
	if git_local_branch_exists "$branch"; then
		git_v_delete_local_branch "$branch"
	fi
	if git_remote_branch_exists "$branch"; then
		git_v_delete_remote_branch "$branch"
	fi
}

git_v_ensure_merged() {
	local branch="$1"; local base_branch="$2"
	git_v_checkout "$base_branch"
	git_v_pull
	git_v_checkout "$branch"
	git_v_pull
	if git_is_different "$branch" "$base_branch" && ! git_is_merged "$base_branch"; then
		git_v_merge "$base_branch"
	fi
}

git_v_merge() {
	local branch="$1"
	io_log "merging changes from '$branch'..."
	git_merge "$branch"
	io_status_logger $? "merged ok" "conflicts were found during the merge, resolve them in your favorite merge tool"
}

git_v_create_tag() {
	local tag="$1"; local message="$2"
	io_log "creating tag '$tag'..."
	git_create_tag "$tag" "$message"
	io_status_logger $? "created ok" "create failed"
}


# - - - - - config - - - - - #

git_config_section="gitflux"

git_config_get() {
	local namespace="$1"
	echo "$(git config --global --get "$git_config_section.$namespace")"
}

git_config_set() {
	local namespace="$1"; local value="$2"
	git config --global "$git_config_section.$namespace" "$value"
}

git_config_unset() {
	local namespace="$1"
	git config --global --unset "$git_config_section.$namespace"
}

git_config_remove_section() {
	local namespace="$1"
	git config --global --remove-section "$git_config_section.$namespace"	
}

git_config_get_subsections_by_value() {
	local key="$1"; local value="$2"; local prefix="$3"
	local subsection_list; local config_value; local config_subsection
	local config_lines="$(git config --global --get-regexp "$git_config_section"'\..*\.'"$key")"
	while read -r line; do
		# extract the config value
		config_value="$(echo "$line" | cut -d ' ' -f 2)"
		# if it does not match the passed value filter, abort this line
		[[ -n $value && $config_value != $value ]] && continue
		# strip down the section and key name to get the subsection
		config_subsection="$(echo "$line" | cut -d ' ' -f 1 | sed -e 's,'"$git_config_section"'\.\(.*\)\.'"$key"',\1,')"
		# strip down the prefix, if passed
		if [[ -n $prefix ]]; then
			config_subsection="$(echo "$config_subsection" | sed -e 's,'"$prefix"'\(.*\),\1,')"
		fi
		# add subsection to the result list
		subsection_list="$subsection_list $config_subsection"
	done <<< "$config_lines"
	# remove leading spaces and send to stdout
	echo "$subsection_list" | sed -e 's,^ *,,'
}

git_config_escape_subsection() {
	printf "%s" "$1" | sed 's,\([\\\"]\),\\\1,g' # '\' and '"' must be escaped in git config subsection names
}


# - - - - - hub - - - - - #

hub_domain() {
	local domain="$(git_repo_domain)"
	if [[ $domain = github.com ]]; then
		domain='api.'"$domain"
	fi
	printf "%s" "$domain"
}

hub_root_endpoint() {
	local root_endpoint
	local domain="$(git_repo_domain)"
	if [[ $domain = github.com ]]; then
		root_endpoint='api.'"$domain"
	else # github enterprise
		root_endpoint="$domain"'/api/v3'
	fi
	printf "%s" "$root_endpoint"
}

hub_post() {
	local resource="$1"; local data="$2"
	# optionally pass credentials in the form "user:pass". if not passed, fallback to use the netrc file
	local credentials="${3:+--user $3}"; local netrc="${3:---netrc}"
	local accept_header='Accept: application/vnd.github.v3+json'
	local location='https://'"$(hub_root_endpoint)$resource"

	curl --silent \
		${netrc} \
		${credentials} \
		--header "$accept_header" \
		--data "$data" \
		--location "$location"
}

hub_response_status() {
	local response="$1"; local error_message
	local first_error="$(echo "$response" | json_select '.errors[0]')"
	if [[ $first_error ]]; then
		code="$(echo "$first_error" | json_get "code")"
		if [[ $code = custom ]]; then
			error_message="$(echo "$first_error" | json_get "message")"
		else
			error_message="$code"
		fi
	else
		error_message="$(echo "$response" | json_get "message")"
	fi

	if [[ $error_message ]]; then
		io_status_fatal "$3: '$error_message'" 1
	else
		io_log_ok "$2" 1
	fi
}

hub_ensure_authenticated() {
	local domain="$(hub_domain)"
	local netrc="$(os_value '.netrc' '_netrc')"
	if [[ ! -e ~/$netrc || -z $(cat ~/${netrc} | grep "$domain") ]]; then
		local pass="$(io_prompt_pass "type in your github password (you'll only have to do this once)")"; io_log
		local user="$(git_repo_user)"
		# currently only 'public_repo' is needed (for pull-requests)
		local data='{
		                "scopes": ["public_repo"],
		                "note": "Git Flux"
		            }'

		io_log; io_log "creating an access token on '$domain'..."
		local response="$(hub_post "/authorizations" "$data" "$user:$pass")"
		hub_response_status "$response" "created ok" "create failed"

		local token="$(echo "$response" | json_get "token")"
		if [[ $token ]]; then
			printf "\nmachine %s\nlogin %s\npassword %s\n" "$domain" "$user" "$token" >> ~/${netrc}
		fi
	fi
}

# 
# treats the title/body in the following manner:
#
# - let 'message' be the last commit message
# - let 'joint' be a horizontal ellipsis ('...')
# - let 'title-max-length' be an arbitrary number to try and fit in the PR title field on github as one line
# - if 'message' has line breaks:
#   let 'title' be everything before the first line break
#   let 'body' be the rest of message
#    - if 'title' is longer than 'title-max-length':
#      trim 'title' and prepend the trimmed text to 'body'
#      pad the split joints with 'joint'
# - otherwise (no line breaks were found in 'message'):
#    - if 'message' is longer than 'title-max-length':
#      let 'title' be everything before the index indicated by 'title-max-length'
#      let 'body' be the rest of 'message'
#      pad the split joints with 'joint'
#    - otherwise ('message' is not longer than 'title-max-length'):
#      let 'title' be 'message'
#
hub_build_pull_request_data() {
	local from_branch="$1"; local to_branch="$2"
	local title; local body

	local message="$(git_last_commit_message "$from_branch")"
	local joint='...'
	local title_max_length=40
	if [[ $message = *$'\n'* ]]; then # check for line breaks
		# split message at the first line break
		title="$(head -n 1 <<< "$message")"
		body="$(tail -n +2 <<< "$message")"
		if (( ${#title} > $title_max_length )); then
			body="$joint${title:$title_max_length}"'\n'"$body" # re-add the lost line break before the original body
			title="${title:0:$title_max_length}$joint"
		fi
	else # no line breaks
		if (( ${#message} > $title_max_length )); then
			title="${message:0:$title_max_length}$joint"
			body="$joint${message:$title_max_length}"
		else
			title="$message"
		fi
	fi

	title="$(json_escape_string "$title")"
	body="$(json_escape_string "$body")"

	printf "%s" '{
	                 "title": "'"$title"'",
	                 "body": "'"$body"'",
	                 "head": "'"$from_branch"'",
	                 "base": "'"$to_branch"'"
	             }'
}

hub_create_pull_request() {
	local from_branch="$1"; local to_branch="$2"

	io_log "creating pull-request from '$from_branch' to '$to_branch'..."
	local data="$(hub_build_pull_request_data "$from_branch" "$to_branch")"
	local response="$(hub_post "/repos/$(git_repo_user)/$(git_repo_name)/pulls" "$data")"
	local pr_url="$(echo "$response" | json_get "html_url")"
	hub_response_status "$response" "created ok, here's the url: $pr_url" "create failed"
}
