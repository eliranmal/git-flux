#!/usr/bin/env sh


git_local_branches() {
	git branch --no-color | sed 's/^[* ] //'
}

git_remote_branches() {
	git branch -r --no-color | sed 's/^[* ] //'
}

git_all_branches() {
	( git branch --no-color; git branch -r --no-color) | sed 's/^[* ] //'
}

git_all_tags() {
	git tag
}

git_current_branch() {
	git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

git_is_clean_working_tree() {
	if ! git diff --no-ext-diff --ignore-submodules --quiet --exit-code; then
		return 1
	elif ! git diff-index --cached --quiet --ignore-submodules HEAD --; then
		return 2
	else
		return 0
	fi
}

git_repo_is_headless() {
	! git rev-parse --quiet --verify HEAD >/dev/null 2>&1
}

git_local_branch_exists() {
	has $1 $(git_local_branches)
}

git_remote_branch_exists() {
	has $1 $(git_remote_branches)
}

git_branch_exists() {
	has $1 $(git_all_branches)
}

git_tag_exists() {
	has $1 $(git_all_tags)
}

git_config_escape_subsection() {
	printf "%s" "$1" | sed 's@\([\\\"]\)@\\\1@g' # '\' and '"' are not allowed in git config subsection names
}


git_checkout() {
	local branch="$1"
	git checkout "$branch" >/dev/null 2>&1 && {
		io_log_ok "switched to '$branch'" 1
	} || {
		io_status_fatal "switching to '$branch' failed" 1
	}
}

git_delete_local_branch() {
	local branch="$1"
	git branch -D "$branch" >/dev/null 2>&1 && {
		io_log_ok "'$branch' deleted locally" 1
	} || {
		io_status_fatal "delete of local '$branch' failed" 1
	}
}

git_delete_remote_branch() {
	local branch="$1"
	git push origin :"$branch" >/dev/null 2>&1 && {
		io_log_ok "'$branch' deleted remotely" 1
	} || {
		io_status_fatal "delete of remote '$branch' failed" 1
	}
}

git_pull() {
	git pull >/dev/null 2>&1 && {
		io_log_ok "updated from the remote" 1
	} || {
		io_status_fatal "updating from the remote failed" 1
	}
}

git_create_branch() {
	local branch="$1"
	git checkout -b "$branch" >/dev/null 2>&1 && {
		io_log_ok "'$branch' was created and is now the current branch" 1
	} || {
		io_status_fatal "creating '$branch' failed" 1
	}
}

git_push_new_branch() {
	local branch="$1"
	git push --set-upstream origin "$branch" >/dev/null 2>&1 && {
		io_log_ok "'$branch' pushed to the remote" 1
	} || {
		io_status_fatal "pushing '$branch' to the remote failed" 1
	}
}

git_merge() {
	local branch="$1"
	git merge --no-edit "$branch" >/dev/null 2>&1 && {
		io_log_ok "merged from '$branch'" 1
	} || {
		io_status_fatal "conflicts were found during the merge from '$branch', resolve them in your favorite merge tool" 1
	}

}
