#!/usr/bin/env sh


USAGE="init [-h]"

LONG_USAGE="configures the le-git-flow environment.

1) feature branch prefix?
	a prefix for feature branch names, e.g. 'foo' will result in feature branch names such as 'foo__my_awesome_feature'.
2) team branch prefix?
	your team's branch name prefix, defaults to 'team'.
3) team branch suffix?
	your team's branch name suffix, e.g. 'foo_bar' will result in a team branch name like 'team__foo_bar'.
4) integration branch?
	the integration branch name, defaults to 'integration'.
5) release candidate branch prefix?
	a prefix for release candidate branch names, defaults to 'rc'.
6) hot-fix branch prefix?
	a prefix for hot-fix branch names, defaults to 'hf'.


notes:
- the delimiter used to concatenate the prefixes is double-underscore ('__').
- any dashes inside branch names will be replaced with underscores.
"


cmd_default() {
	initialize
}


initialize() {
	log
	log "initializing git-le"
	log

	git config --global --unset le-gitflow.initialized

	local default_suggestion
	local branch_prefix_delimiter="__"

	printf "feature branch prefix? "; read answer
	if [[ -z $answer ]]; then
		fatal "feature branch prefix is mandatory"
	fi
	local feature_branch_prefix=$(lower_dashes $answer)

	default_suggestion="team"
	printf "team branch prefix? [$default_suggestion] "; read answer
	local team_branch_prefix=$(lower_dashes ${answer:-$default_suggestion})

	printf "team branch suffix? "; read answer
	if [[ -z $answer ]]; then
		fatal "team branch suffix is mandatory"
	fi
	local team_branch_suffix=$(lower_dashes $answer)
	
	local team_branch="$team_branch_prefix$branch_prefix_delimiter$team_branch_suffix"
	validate_git_local_branch_exists "$team_branch"
	validate_git_remote_branch_exists "$team_branch"

	default_suggestion="integration"
	printf "integration branch? [$default_suggestion] "; read answer
	local integration_branch=$(lower_dashes ${answer:-$default_suggestion})
	
	validate_git_local_branch_exists "$integration_branch"
	validate_git_remote_branch_exists "$integration_branch"

	default_suggestion="rc"
	printf "release candidate branch prefix? [$default_suggestion] "; read answer
	local release_candidate_branch_prefix=$(lower_dashes ${answer:-$default_suggestion})

	default_suggestion="hf"
	printf "hot-fix branch prefix? [$default_suggestion] "; read answer
	local hot_fix_branch_prefix=$(lower_dashes ${answer:-$default_suggestion})

	log
	inform "we've got all the answers:"
	log "feature branch prefix: '$feature_branch_prefix'"
	log "team branch prefix: '$team_branch_prefix'"
	log "team branch suffix: '$team_branch_suffix'"
	log "integration branch: '$integration_branch'"
	log "release candidate branch prefix: '$release_candidate_branch_prefix'"
	log "hot-fix branch prefix: '$hot_fix_branch_prefix'"
	log

	printf "is this ok? (y/n) "; read answer
	if [[ $answer != "y" ]]; then
		fatal "initialization aborted. better luck next time!"
	fi

	git config --global le-gitflow.branch-prefix.feature "$feature_branch_prefix$branch_prefix_delimiter"
	git config --global le-gitflow.branch.team "$team_branch"
	git config --global le-gitflow.branch.integration "$integration_branch"
	git config --global le-gitflow.branch-prefix.rc "$release_candidate_branch_prefix$branch_prefix_delimiter"
	git config --global le-gitflow.branch-prefix.hf "$hot_fix_branch_prefix$branch_prefix_delimiter"
	git config --global le-gitflow.initialized "true"
	ok "all done. you're awesome!"
}
