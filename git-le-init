#!/usr/bin/env sh

# note that the "✔" and "✘" characters will not show in git-bash (do we care?)

USAGE="init [-h]"

LONG_USAGE="
configures the le-git-flow environment.

1) feature branch prefix?
	a prefix for feature branch names, e.g. \"foo\".
2) team branch prefix?
	your team's branch name prefix, defaults to \"team\".
3) team branch suffix?
	your team's branch name suffix, e.g. \"foo\".
4) integration branch?
	the integration branch name, defaults to \"integration\".
5) release candidate branch prefix?
	a prefix for release candidate branch names, defaults to \"rc\".
6) hot-fix branch prefix?
	a prefix for hot-fix branch names, defaults to \"hf\".


- please leave all defaults unchanged.
- the delimiter used to concatenate the prefixes/suffixes is the underscore character (\"_\").
- any dashes in branch names will be replaced with underscores.
"

cmd_default() {	
	echo
	echo "initializing git-le"
	echo

	git config --global --unset le-gitflow.initialized

	local default_suggestion
	local delimiter="_"

	printf "feature branch prefix? "; read answer
	if [[ -z $answer ]]; then
		die "✘ feature branch prefix is mandatory"
	fi
	local feature_branch_prefix=$(escape_branch_name $answer)

	default_suggestion="team"
	printf "team branch prefix? [$default_suggestion] "; read answer
	local team_branch_prefix=$(escape_branch_name ${answer:-$default_suggestion})

	printf "team branch suffix? "; read answer
	if [[ -z $answer ]]; then
		die "✘ team branch suffix is mandatory"
	fi
	local team_branch_suffix=$(escape_branch_name $answer)
	
	local team_branch="$team_branch_prefix$delimiter$team_branch_suffix"
	if ! git_local_branch_exists "$team_branch"; then
		die "✘ team branch '$team_branch' does not exist locally, you should create it first."
	fi
	if ! git_remote_branch_exists "origin/$team_branch"; then
		die "✘ team branch '$team_branch' does not exist on the remote, you should create it first."
	fi

	default_suggestion="integration"
	printf "integration branch? [$default_suggestion] "; read answer
	local integration_branch=$(escape_branch_name ${answer:-$default_suggestion})
	
	if ! git_local_branch_exists "$integration_branch"; then
		die "✘ integration branch '$integration_branch' does not exist locally, you should create it first."
	fi
	if ! git_remote_branch_exists "origin/$integration_branch"; then
		die "✘ integration branch '$integration_branch' does not exist on the remote, you should create it first."
	fi

	default_suggestion="rc"
	printf "release candidate branch prefix? [$default_suggestion] "; read answer
	local release_candidate_branch_prefix=$(escape_branch_name ${answer:-$default_suggestion})

	default_suggestion="hf"
	printf "hot-fix branch prefix? [$default_suggestion] "; read answer
	local hot_fix_branch_prefix=$(escape_branch_name ${answer:-$default_suggestion})

	echo
	echo "ℹ feature branch prefix: '$feature_branch_prefix'"
	echo "ℹ team branch prefix: '$team_branch_prefix'"
	echo "ℹ team branch suffix: '$team_branch_suffix'"
	echo "ℹ integration branch: '$integration_branch'"
	echo "ℹ release candidate branch prefix: '$release_candidate_branch_prefix'"
	echo "ℹ hot-fix branch prefix: '$hot_fix_branch_prefix'"
	echo

	printf "is this ok? [y/n] "; read answer
	if [[ $answer = "y" ]]; then
		git config --global le-gitflow.branch-prefix.feature "$feature_branch_prefix$delimiter"
		git config --global le-gitflow.branch.team "$team_branch"
		git config --global le-gitflow.branch.integration "$integration_branch"
		git config --global le-gitflow.branch-prefix.rc "$release_candidate_branch_prefix$delimiter"
		git config --global le-gitflow.branch-prefix.hf "$hot_fix_branch_prefix$delimiter"
		git config --global le-gitflow.initialized "true"
		echo "✔ all done! you're awesome!"
	else
		die "✘ initialization aborted. i knew you'd chicken out."
	fi
}

escape_branch_name() {
	echo "$1" | sed 's/-/_/g'
}
