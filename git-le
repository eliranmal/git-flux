#!/usr/bin/env sh

# can this git command run from within child directories of the git repo
SUBDIRECTORY_OK="yes"
# output for stdout when calling the usage() function
USAGE="<init|feature|team> [action] [-h]"
# appended to the usage output when using the `-h` flag
LONG_USAGE="
                a tool for managing git workflows. yep.

                     .__.__  ___.                                      
_____    ______ ____ |__|__| \_ |__ _____    ____   ____   ___________ 
\__  \  /  ___// ___\|  |  |  | __ \\__  \  /    \ /    \_/ __ \_  __ \
 / __ \_\___ \\  \___|  |  |  | \_\ \/ __ \|   |  \   |  \  ___/|  | \/
(____  /____  >\___  >__|__|  |___  (____  /___|  /___|  /\___  >__|   
     \/     \/     \/             \/     \/     \/     \/     \/       
"

main() {

	# no arguments, just show usage and abort
	if [[ $# -lt 1 ]]; then
		echo $USAGE; exit 0
	fi

	local working_dir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

	# include common utilities
	source "$working_dir/gitle-common"

	# retrieve the sub-command and remove it from the arguments list
	local sub_command="$1"; shift

	# verify the sub-command script exists
	if [[ ! -e "$working_dir/git-le-$sub_command" ]]; then
		echo "$USAGE"; exit 0
	fi

	# include the sub-command script
	source "$working_dir/git-le-$sub_command"

	# include git builtin library 
	# (loaded here to allow the sub-command script to override usage/long-usage)
	source "$(git --exec-path)/git-sh-setup"

	# retrieve the action and remove it from the arguments list
	local action="$1"; shift

	if [[ -z $action ]]; then
		action="default"
	fi

	# verify the action function is available
	if ! is_available "cmd_$action"; then
		usage
	fi

	# delegate to the appropriate sub-command action
	cmd_${action} "$@"
}

main "$@"
