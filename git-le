#!/usr/bin/env sh


# indicates this git command can run from within child directories of the git repo
SUBDIRECTORY_OK="yes"
# output for stdout when calling the usage() function
USAGE="<init|feature|team|integration> [action] [-h]"
# appended to the usage output when using the `-h` flag
LONG_USAGE="team-oriented git workflow commands. yep."


main() {

	local working_dir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

	# include common utilities
	source "$working_dir/gitflux-common"

	local sub_command="$1";

	# lose the sub-command arg only if it's not an `-h` flag, to not break long-usage
	[[ -n $1 && $1 != "-h" ]] && shift

	# verify the sub-command script exists, and include it
	if [[ -e "$working_dir/git-le-$sub_command" ]]; then
		source "$working_dir/git-le-$sub_command"
	fi

	local action="$1";

	# lose the action arg only if it's not an `-h` flag, to not break long-usage
	[[ -n $1 && $1 != "-h" ]] && shift

	if [[ -z $action ]]; then
		action="default"
	fi

	# include git builtin library 
	# this script have to be sourced after sourcing the sub-command script, to allow it to override USAGE/LONG_USAGE
	# note that usage() expects the first script argument to be `-h` when called, so shifting arguments can change the result
	source "$(git --exec-path)/git-sh-setup"

	# verify the action function is available
	if ! is_available "cmd_$action"; then
		usage
	fi

	# validate action prerequisites
	if [[ $sub_command != "init" ]]; then
		validate_le_gitflow_initialized
	fi

	# delegate to the sub-command action api
	cmd_${action} "$@"
}

main "$@"
