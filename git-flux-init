#!/usr/bin/env sh


USAGE="init [-h]"

LONG_USAGE="configures the git-flux environment with an interactive survey.
here are the questions you'd have to answer:

   feature prefix?
      a prefix for feature branch names, defaults to 'feature/'. for example, 'foo/' \
will result in feature branch names like 'foo/my_awesome_feature'.
   team prefix?
      your team's branch name prefix, defaults to 'team/'.
   release candidate prefix?
      a prefix for release candidate branch names, defaults to 'rc/'.
   hot-fix prefix?
      a prefix for hot-fix branch names, defaults to 'hf/'.
   integration branch?
      the long-lived integration branch name, serves as base to team branches. \
if this branch don't exist, it will be created. defaults to 'integration'.

"


cmd_default() {
	io_log; io_log "- - - git-flux initializer - - -"; io_log

	git_config_set "initialized" false

	local prefix_delimiter="/"
	
	local feature_prefix=$(io_prompt "feature prefix" "feature$prefix_delimiter")
	local team_prefix=$(io_prompt "team prefix" "team$prefix_delimiter")
	local release_candidate_prefix=$(io_prompt "release candidate prefix" "rc$prefix_delimiter")
	local hot_fix_prefix=$(io_prompt "hot-fix prefix" "hf$prefix_delimiter")
	local integration_branch=$(io_prompt "integration branch" "integration")

	# no need to check the remote branch exists, we'd wanna set it as the upstream anyways
	if ! git_local_branch_exists "$integration_branch"; then
		io_log_info "'$integration_branch' branch not found locally."
		git_create_and_push_branch "$integration_branch"
	fi


	git_config_set "prefix.feature" "$feature_prefix"
	git_config_set "prefix.team" "$team_prefix"
	git_config_set "prefix.rc" "$release_candidate_prefix"
	git_config_set "prefix.hf" "$hot_fix_prefix"
	git_config_set "branch.integration" "$integration_branch"
	git_config_set "initialized" true
	
	io_log; io_log_ok "all done. you're awesome!"; io_log
}
