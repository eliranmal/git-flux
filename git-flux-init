#!/usr/bin/env sh


USAGE="init [-h]"

LONG_USAGE="configures the git-flux environment with an interactive survey.

here are the questions you'd have to answer:

★ feature prefix?
	a prefix for feature branch names, e.g. 'foo/' will result in feature branch names like 'foo/my_awesome_feature'.
★ team prefix?
	your team's branch name prefix, defaults to 'team/'.
★ release candidate prefix?
	a prefix for release candidate branch names, defaults to 'rc/'.
★ hot-fix prefix?
	a prefix for hot-fix branch names, defaults to 'hf/'.
★ integration branch?
	the long-lived integration branch's name, defaults to 'integration'.

"


cmd_default() {
	initialize
}


initialize() {
	io_log "- - - git-flux initializer - - -" true

	git config --global gitflux.initialized "false"

	local prefix_delimiter="/"
	
	local feature_prefix=$(io_prompt "feature prefix" "feature$prefix_delimiter")
	local team_prefix=$(io_prompt "team prefix" "team$prefix_delimiter")
	local release_candidate_prefix=$(io_prompt "release candidate prefix" "rc$prefix_delimiter")
	local hot_fix_prefix=$(io_prompt "hot-fix prefix" "hf$prefix_delimiter")
	local integration_branch=$(io_prompt "integration branch" "integration")
	validate_git_local_branch_exists "$integration_branch"
	validate_git_remote_branch_exists "$integration_branch"

	git config --global gitflux.prefix.feature "$feature_prefix"
	git config --global gitflux.prefix.team "$team_prefix"
	git config --global gitflux.prefix.rc "$release_candidate_prefix"
	git config --global gitflux.prefix.hf "$hot_fix_prefix"
	git config --global gitflux.branch.integration "$integration_branch"
	git config --global gitflux.initialized "true"
	
	io_log_ok "all done. you're awesome!" true
}
