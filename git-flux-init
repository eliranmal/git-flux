#!/usr/bin/env bash


cmd_usage_default() {
	printf "%s" "[-h]"
}

cmd_long_usage_default() {
	printf "%s" "\
$(f_heading "init")

configure the git-flux environment with an interactive survey.


here are the details you need to fill in:

$(f_list_item \
"$(f_fg_blue "feature prefix")" \
"a prefix for feature branch names, defaults to $(f_code "feature/").
for example, $(f_code "foo/") will result in feature branch names like $(f_code "foo/my_awesome_feature"), \
and $(f_code "feature/foo/") will generate names like $(f_code "feature/foo/my_awesome_feature").")

$(f_list_item \
"$(f_fg_yellow "team prefix")" \
"a prefix for team branch names, defaults to $(f_code "team/").")

$(f_list_item \
"$(f_fg_green "release candidate prefix")" \
"a prefix for release candidate branch names, defaults to $(f_code "rc/").")

$(f_list_item \
"$(f_fg_red "hot-fix prefix")" \
"a prefix for hot-fix branch names, defaults to $(f_code "hf/").")

$(f_list_item \
"$(f_fg_magenta "integration branch")" \
"the long-lived integration branch name, defaults to $(f_code "integration").
this branch serves as the base to all team branches, and will be created if not already exists.")
 "
}


# todo - provide a way to configure global stuff (prompt user if not already configured, or ask if she would like to alter the current config)
# todo - save team/integration long-lived branches in the local config (check for get operations on that config entry as well)

cmd_default() {
	local feature_prefix
	local team_prefix
	local release_candidate_prefix
	local hot_fix_prefix
	local integration_branch
	local curr_feature_prefix
	local curr_team_prefix
	local curr_rc_prefix
	local curr_hf_prefix
	local curr_integration_branch
	local feature_prefix_suggestion
	local team_prefix_suggestion
	local rc_prefix_suggestion
	local hf_prefix_suggestion
	local integration_branch_suggestion
	local prefix_delimiter="/"

	io_log; io_log_banner "git-flux initializer"; io_log
	io_log "please fill some details for the global configuration. they'll be used across all git-flux repositories."
	io_log "if you need help, type $(f_code 'git flux init -h')."; io_log

	curr_feature_prefix="$(git_config_get_global "prefix.feature")"
	curr_team_prefix="$(git_config_get_global "prefix.team")"
	curr_rc_prefix="$(git_config_get_global "prefix.rc")"
	curr_hf_prefix="$(git_config_get_global "prefix.hf")"
	curr_integration_branch="$(git_config_get_global "branch.integration")"

	git_config_set_global "initialized" "$(
		if [[ $curr_feature_prefix && $curr_team_prefix && $curr_rc_prefix && $curr_hf_prefix && $curr_integration_branch ]]; then
			echo 'true'
		else
			echo 'false'
		fi
	)"

	feature_prefix_suggestion="${curr_feature_prefix:-feature$prefix_delimiter}"
	team_prefix_suggestion="${curr_team_prefix:-team$prefix_delimiter}"
	rc_prefix_suggestion="${curr_rc_prefix:-rc$prefix_delimiter}"
	hf_prefix_suggestion="${curr_hf_prefix:-hf$prefix_delimiter}"
	integration_branch_suggestion="${curr_integration_branch:-integration}"

	feature_prefix=$(io_prompt "feature prefix" "$feature_prefix_suggestion")
	team_prefix=$(io_prompt "team prefix" "$team_prefix_suggestion")
	release_candidate_prefix=$(io_prompt "release candidate prefix" "$rc_prefix_suggestion")
	hot_fix_prefix=$(io_prompt "hot-fix prefix" "$hf_prefix_suggestion")
	integration_branch=$(io_prompt "integration branch" "$integration_branch_suggestion")

	io_log; create_branch_from_base "$integration_branch" "master"

	git_config_set_global "prefix.feature" "$feature_prefix"
	git_config_set_global "prefix.team" "$team_prefix"
	git_config_set_global "prefix.rc" "$release_candidate_prefix"
	git_config_set_global "prefix.hf" "$hot_fix_prefix"
	# todo - is this necessary now?
	git_config_set_global "branch.integration" "$integration_branch"

	# todo - this should be set in the local config level (this is where we check for it later)
	git_config_set_global "initialized" true
	
	io_log; io_log_ok "all done. you're awesome!"; io_log
}
