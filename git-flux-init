#!/usr/bin/env bash


cmd_usage_default() {
	printf "%s" "[-h]"
}

cmd_long_usage_default() {
	printf "%s" "\
$(f_heading "init")

configure the git-flux environment with an interactive survey.


$(f_subheading "global options")

$(f_list_item \
"$(f_fg_blue "feature prefix")" \
"a prefix for feature branch names, defaults to $(f_code "feature/").
for example, $(f_code "foo/") will result in feature branch names like $(f_code "foo/my_awesome_feature"), \
and $(f_code "feature/foo/") will generate names like $(f_code "feature/foo/my_awesome_feature").")

$(f_list_item \
"$(f_fg_yellow "team prefix")" \
"a prefix for team branch names, defaults to $(f_code "team/").")

$(f_list_item \
"$(f_fg_green "release candidate prefix")" \
"a prefix for release candidate branch names, defaults to $(f_code "rc/").")

$(f_list_item \
"$(f_fg_red "hot-fix prefix")" \
"a prefix for hot-fix branch names, defaults to $(f_code "hf/").")

	
$(f_subheading "local options")

$(f_list_item \
"$(f_fg_magenta "integration branch")" \
"the long-lived integration branch name, defaults to $(f_code "integration").
this branch serves as the base to all team branches, and will be created if not already exists.")
 "
}


cmd_default() {
	greet_hello
	global_survey
	local_survey
	local_bootstrap
	greet_goodbye
}

greet_hello() {
	io_log; io_log; io_log_banner "git-flux initializer"
	io_log; io_log_info "global options apply to all git-flux repositories, and local options only affect the current one."
	io_log_info "to get help, run $(f_code 'git flux init -h')."; io_log
}

greet_goodbye() {
	io_log; io_log_ok "all done. you're awesome!"; io_log
}

global_survey() {
	local feature_prefix
	local team_prefix
	local rc_prefix
	local hf_prefix
	local curr_feature_prefix
	local curr_team_prefix
	local curr_rc_prefix
	local curr_hf_prefix
	local feature_prefix_suggestion
	local team_prefix_suggestion
	local rc_prefix_suggestion
	local hf_prefix_suggestion
	local initialized
	local edit_question="global options are already set, do you want to update them?"
	local abort_response="skipping global configuration."
	local prefix_delimiter="/"

	io_log; io_print "$(f_heading "global options")"; io_log

	initialized="$(git_config_get_global "initialized")"

	# abort if everything is initialized and the user chooses not to edit
	if [[ $initialized = "true" ]] && ! ( io_confirm "$edit_question" "$abort_response" "" "info" ); then
		return 0
	fi

	curr_feature_prefix="$(git_config_get_global "prefix.feature")"
	curr_team_prefix="$(git_config_get_global "prefix.team")"
	curr_rc_prefix="$(git_config_get_global "prefix.rc")"
	curr_hf_prefix="$(git_config_get_global "prefix.hf")"

	feature_prefix_suggestion="${curr_feature_prefix:-feature$prefix_delimiter}"
	team_prefix_suggestion="${curr_team_prefix:-team$prefix_delimiter}"
	rc_prefix_suggestion="${curr_rc_prefix:-rc$prefix_delimiter}"
	hf_prefix_suggestion="${curr_hf_prefix:-hf$prefix_delimiter}"

	feature_prefix=$(io_prompt "feature prefix" "$feature_prefix_suggestion" 1)
	team_prefix=$(io_prompt "team prefix" "$team_prefix_suggestion" 1)
	rc_prefix=$(io_prompt "release candidate prefix" "$rc_prefix_suggestion" 1)
	hf_prefix=$(io_prompt "hot-fix prefix" "$hf_prefix_suggestion" 1)

	git_config_set_global "prefix.feature" "$feature_prefix"
	git_config_set_global "prefix.team" "$team_prefix"
	git_config_set_global "prefix.rc" "$rc_prefix"
	git_config_set_global "prefix.hf" "$hf_prefix"

	if [[ $feature_prefix && $team_prefix && $rc_prefix && $hf_prefix ]]; then
		git_config_set_global "initialized" "true"
		io_log; io_log_ok "global options are all set."; io_log
	else
		git_config_set_global "initialized" "false"
		io_log; io_status_fatal "not all global options are set, please run the initializer again."
	fi
}

local_survey() {
	local integration_branch
	local curr_integration_branch
	local integration_branch_suggestion
	local initialized
	local edit_question="local options are already set, do you want to update them?"
	local abort_response="skipping local configuration."

	io_log; io_print "$(f_heading "local options")"; io_log

	initialized="$(git_config_get "initialized")"

	# abort if everything is initialized and the user chooses not to edit
	if [[ $initialized = "true" ]] && ! ( io_confirm "$edit_question" "$abort_response" "" "info" ); then
		return 0
	fi

	curr_integration_branch="$(git_config_get "branch.integration")"
	integration_branch_suggestion="${curr_integration_branch:-integration}"
	integration_branch=$(io_prompt "integration branch" "$integration_branch_suggestion" 1)

	git_config_set "branch.integration" "$integration_branch"

	if [[ $integration_branch ]]; then
		git_config_set "initialized" "true"
		io_log; io_log_ok "local options are all set."; io_log
	else
		git_config_set "initialized" "false"
		io_log; io_status_fatal "not all local options are set, please run the initializer again."
	fi
}

local_bootstrap() {
	local integration_branch

	io_log; io_print "$(f_heading "local bootstrap")"; io_log

	integration_branch="$(git_config_get "branch.integration")"
	
	create_branch_from_base "$integration_branch" "master"
	io_log; io_status_logger $? "repository bootstrapped ok." "repository bootstrap failed, please run the initializer again." 0; io_log
}
