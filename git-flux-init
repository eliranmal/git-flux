#!/usr/bin/env bash


cmd_usage_default() {
	printf "[-h]"
}

cmd_long_usage_default() {
	printf "\
$(f_heading "init")

configures the git-flux environment with an interactive survey.


here are the details you need to fill in:

$(f_list_item \
"$(f_fg_blue "feature prefix")" \
"a prefix for feature branch names, defaults to $(f_code "feature/").
for example, $(f_code "foo/") will result in feature branch names like $(f_code "foo/my_awesome_feature").")

$(f_list_item \
"$(f_fg_yellow "team prefix")" \
"a prefix for team branch names, defaults to $(f_code "team/").")

$(f_list_item \
"$(f_fg_green "release candidate prefix")" \
"a prefix for release candidate branch names, defaults to $(f_code "rc/").")

$(f_list_item \
"$(f_fg_red "hot-fix prefix")" \
"a prefix for hot-fix branch names, defaults to $(f_code "hf/").")

$(f_list_item \
"$(f_fg_magenta "integration branch")" \
"the long-lived integration branch name, defaults to $(f_code "integration").
this branch serves as the base to all team branches, and will be created if it does not already exist.")
 "
}


cmd_default() {
	io_log; io_log_banner "git-flux initializer"; io_log

	git_config_set "initialized" false

	local prefix_delimiter="/"
	
	local feature_prefix=$(io_prompt "feature prefix" "feature$prefix_delimiter")
	local team_prefix=$(io_prompt "team prefix" "team$prefix_delimiter")
	local release_candidate_prefix=$(io_prompt "release candidate prefix" "rc$prefix_delimiter")
	local hot_fix_prefix=$(io_prompt "hot-fix prefix" "hf$prefix_delimiter")
	local integration_branch=$(io_prompt "integration branch" "integration")

	io_log; git_v_ensure_branch "$integration_branch"

	git_config_set "prefix.feature" "$feature_prefix"
	git_config_set "prefix.team" "$team_prefix"
	git_config_set "prefix.rc" "$release_candidate_prefix"
	git_config_set "prefix.hf" "$hot_fix_prefix"
	git_config_set "branch.integration" "$integration_branch"
	git_config_set "initialized" true
	
	io_log; io_log_ok "all done. you're awesome!"; io_log
}
