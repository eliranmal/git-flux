#!/usr/bin/env bash


cmd_usage_default() {
	printf "start|finish|review <name> [-h]"
}

cmd_usage_start() {
	printf "start <name> [-h]"
}

cmd_usage_finish() {
	printf "finish <name> [-h]"
}

cmd_usage_review() {
	printf "review <name> [-h]"
}

cmd_long_usage_default() {
	printf "\
$(f_heading "rc" | f_fg_green)

handle lifecycle of release-candidates.


$(f_subheading "available actions")

$(cmd_long_usage_start)
$(cmd_long_usage_finish)
$(cmd_long_usage_review)
"
}

cmd_long_usage_start() {
	printf "\
$(f_code_definition \
"$(cmd_usage_start)" \
"start a release-candidate; create a local branch and push it to the remote.
the branch name will be composed of the pre-configured release-candidate prefix and the passed $(f_code "name").
it is advised that $(f_code "name") will be the next version, e.g. '1.1.0'.")
 "
}

cmd_long_usage_finish() {
	printf "\
$(f_code_definition \
"$(cmd_usage_finish)" \
"finish an existing release-candidate; delete its local and remote branches, for good.")
 "
}

cmd_long_usage_review() {
	printf "\
$(f_code_definition \
"$(cmd_usage_review)" \
"opens a pull request from the release-candidate branch to its base branch, i.e. the integration branch, for review in github.")
 "
}

cmd_start() {
	require_args "$1"
	io_log; create_branch_from_base "$(git_config_get "prefix.rc")$1" "$(git_config_get "branch.integration")"
	io_log; io_log_ok "release candidate '$1' is created. congrats!"; io_log
}

cmd_finish() {
	require_args "$1"
	io_log; destroy_branch_from_base "$(git_config_get "prefix.rc")$1"
	io_log; io_log_ok "release candidate '$1' is finished. goodbye!"; io_log
}

cmd_review() {
	require_args "$1"
	io_log; review_branch_from_base "$(git_config_get "prefix.rc")$1"
	io_log; io_log_ok "release candidate '$1' is ready for review."; io_log
}
