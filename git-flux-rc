#!/usr/bin/env sh


cmd_usage_default() {
	printf "<start|finish> <name> [-h]"
}

cmd_usage_start() {
	printf "start <name> [-h]"
}

cmd_usage_finish() {
	printf "finish <name> [-h]"
}

cmd_long_usage_default() {
	printf "\
$(t_heading "rc" | t_fg_green)

handle lifecycle of release-candidates.


$(t_subheading "available actions")

$(cmd_long_usage_start)
$(cmd_long_usage_finish)
"
}

cmd_long_usage_start() {
	printf "\
   $(cmd_usage_start | t_bold)
      start a release-candidate; create a local branch and push it to the remote.
      the branch name will be composed of the pre-configured release-candidate prefix and the passed $(t_code "name").
 "
}

cmd_long_usage_finish() {
	printf "\
   $(cmd_usage_finish | t_bold)
      finish an existing release-candidate; delete its local and remote branches, for good.
 "
}

cmd_start() {
	require_args "$1"
	io_log; create_branch_from_base "$(git_config_get "prefix.rc")$1" "$(git_config_get "branch.integration")"
	io_log; io_log_ok "release candidate '$1' is created. congrats!"; io_log
}

cmd_finish() {
	require_args "$1"
	io_log; destroy_branch_from_base "$(git_config_get "prefix.rc")$1"
	io_log; io_log_ok "release candidate '$1' is finished. goodbye!"; io_log
}
