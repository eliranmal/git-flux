#!/usr/bin/env sh


# 
# little text formatters for terminal or markdown style output.
# 
# 
# environment:
#   [FORMAT=terminal|markdown]
# 
# 
# usage:
# 
# two possible ways:
# 
# - include the available _t_* tags within strings to wrap terms.
#   tags must be closed with the appropriate _t_*_off tag.
# 
# - use the formatter functions, they can be piped, or accept arguments.
# 
# 
# examples:
# 
# - wrapping with tags:
#   echo "this text will be ${_t_bold}bold${_t_bold_off}"
#   echo "text can be ${_t_under}underlined${_t_under_off} as well"
#   echo "color text in ${_t_fg_yellow}yellow${_t_fg_off} or ${_t_fg_blue}blue${_t_fg_off}"
# 
# - using functions:
# 
#       echo "$(t_heading "foo")"
#       echo "$(echo "foo" | t_heading)"
#       echo "$(echo "foo" | t_heading | t_fg_yellow)"
# 
#   you can also skip the echo, and compose the formatter functions in any which way:
# 
#       echo "$(t_heading "foo" | t_fg_yellow)"
# 
# 
# caveats:
# 
# - _t_bold cannot be nested and must be the outermost tag, as _t_bold_off will 
#   reset any other style.
# 
# 
# references:
# 
# - the colors used here are based on the SMYCK color scheme (http://color.smyck.org/):
# 
#   red: #c75646
#   green: #8eb33b
#   yellow: #d0b03c
#   blue: #72b3cc
#   magenta: #c8a0d1
#   cyan: #218693
#   lightred: #e09690
#   lightgreen: #cdee69
#   lightyellow: #ffe377
#   lightblue: #9cd9f0
#   lightmagenta: #fbb1f9
#   lightcyan: #77dfd8
# 
#   they were converted to their xterm-256 ansi equivalents with colortrans.py 
#   (https://gist.github.com/MicahElliott/719710).
# 



t_util_wrap() {
	local tag="$1"; shift; local tagoff="$1"; shift
	local input=$(get_input "$@")
	printf "%s%s%s" "$tag" "$input" "$tagoff"
}

t_util_prefix() {
	local prefix="$1"; shift
	local input=$(get_input "$@")
	printf "%s%s" "$prefix" "$input"
}

t_util_suffix() {
	local suffix="$1"; shift
	local input=$(get_input "$@")
	printf "%s%s" "$input" "$suffix"
}

t_util_prefix_multiline() {
	local prefix=$1; shift
	local input=$(get_input "$@")
	printf "%s" "$input" | sed -e 's,^\(.*\)$,'"$prefix"'\1,'
}

t_util_suffix_multiline() {
	local suffix=$1; shift
	local input=$(get_input "$@")
	printf "%s" "$input" | sed -e 's,^\(.*\)$,\1'"$suffix"','
}

t_util_underline() {
	local char="$1"; shift
	local suffix="$1"; shift
	local input=$(get_input "$@")
	local underline="$(repeat ${char} ${#input})"
	printf "%s%s\n%s" "$input" "$suffix" "$underline"
}

t_util_replace_tags() {
	local from_tag="$1"; local from_tag_off="$2"; local to_tag="$3"; local to_tag_off="$4";
	sed -e 's,'"$from_tag"'\([^'"$from_tag"']*\)'"$from_tag_off"','"$to_tag"'\1'"$to_tag_off"',g'
}

t_util_replace_entities() {
	sed -e 's,\&,\&amp;,g' | sed -e 's,\<,\&lt;,g' | sed -e 's,\>,\&gt;,g'
}


t_init_terminal() {

	if [[ ! -t 2 ]]; then
		return 1
	fi

	_t_bold=$(       tput bold   || tput md      )
	_t_bold_off=$(   tput sgr0                   )
	_t_italic=$(     tput sitm   || tput ZH      )
	_t_italic_off=$( tput ritm   || tput ZR      )
	_t_under=$(      tput smul   || tput us      )
	_t_under_off=$(  tput rmul   || tput ue      )
	_t_strike=$'\033[9m'
	_t_strike_off=$'\033[29m'
	
	_t_code=$_t_bold
	_t_code_off=$_t_bold_off
	
	_t_list_item=' * '

	_t_new_line="\n"
	_t_line_break="$_t_new_line "
	
	_t_fg_off=$(                 tput setaf 0    || tput AF 0    )
	if (( $(tput colors) >= 256 )); then
		_t_fg_red=$(             tput setaf 167  || tput AF 167  )
		_t_fg_green=$(           tput setaf 107  || tput AF 107  )
		_t_fg_yellow=$(          tput setaf 179  || tput AF 179  )
		_t_fg_blue=$(            tput setaf 74   || tput AF 74   )
		_t_fg_magenta=$(         tput setaf 182  || tput AF 182  )
		_t_fg_cyan=$(            tput setaf 30   || tput AF 30   )
		_t_fg_lightred=$(        tput setaf 174  || tput AF 174  )
		_t_fg_lightgreen=$(      tput setaf 191  || tput AF 191  )
		_t_fg_lightyellow=$(     tput setaf 222  || tput AF 222  )
		_t_fg_lightblue=$(       tput setaf 153  || tput AF 153  )
		_t_fg_lightmagenta=$(    tput setaf 219  || tput AF 219  )
		_t_fg_lightcyan=$(       tput setaf 116  || tput AF 116  )
	elif (( $(tput colors) >= 8 )); then
		_t_fg_red=$(             tput setaf 1    || tput AF 1    )
		_t_fg_green=$(           tput setaf 2    || tput AF 2    )
		_t_fg_yellow=$(          tput setaf 3    || tput AF 3    )
		_t_fg_blue=$(            tput setaf 4    || tput AF 4    )
		_t_fg_magenta=$(         tput setaf 5    || tput AF 5    )
		_t_fg_cyan=$(            tput setaf 6    || tput AF 6    )
		_t_fg_lightred=$_t_fg_red
		_t_fg_lightgreen=$_t_fg_green
		_t_fg_lightyellow=$_t_fg_yellow
		_t_fg_lightblue=$_t_fg_blue
		_t_fg_lightmagenta=$_t_fg_magenta
		_t_fg_lightcyan=$_t_fg_cyan
	fi

	t_heading() {
		t_util_underline '-' "$_t_fg_off" "$@" | t_util_wrap "$_t_bold" "$_t_bold_off"
	}
	t_subheading() {
		t_util_wrap "$_t_under" "$_t_under_off" "$@"
	}
	t_list_item() {
		local title="$1"
		local body="$2"
		if [[ -z $body ]]; then
			t_util_prefix "$_t_list_item" "$title$_t_line_break"
		else
			t_util_wrap "$_t_bold$_t_list_item" "$_t_bold_off$_t_new_line" "$title"
			t_util_prefix_multiline '      ' "$body$_t_line_break"
		fi
	}
	t_definition() {
		t_util_prefix '   ' "$1" | t_util_wrap "$_t_bold" "$_t_bold_off$_t_new_line"
		t_util_prefix_multiline '      ' "$2$_t_line_break"
	}
	t_code_definition() {
		t_definition "$@"
	}

}

t_init_markdown() {
	
	_t_bold='**'
	_t_bold_off=$_t_bold
	_t_italic='_'
	_t_italic_off=$_t_italic
	_t_strike='~~'
	_t_strike_off=$_t_strike

	_t_code='`'
	_t_code_off=$_t_code
	
	_t_list_item='- '
	_t_def_term='<dl>
	<dt>'
	_t_def_term_off='</dt>
'
	_t_def_desc='	<dd>'
	_t_def_desc_off='</dd>
</dl>
'
	_t_new_line="\n"
	_t_line_break="  $_t_new_line"

	t_heading() {
		t_util_prefix '## ' "$1"
	}
	t_subheading() {
		t_util_prefix '#### ' "$1"
	}
	t_list_item() {
		local title="$1"
		local body="$2"
		if [[ -z $body ]]; then
			t_util_prefix "$_t_list_item" "$title$_t_new_line"
		else
			t_util_wrap "$_t_list_item$_t_bold" "$_t_bold_off$_t_line_break" "$title"
			t_util_prefix_multiline '  ' "$body$_t_new_line"
		fi
	}
	t_definition() {
		local term="$(echo "$1" | t_util_replace_entities)"
		local desc="$(echo "$2" | t_util_replace_entities | t_util_suffix_multiline '<br/>')"
		t_util_wrap "$_t_def_term" "$_t_def_term_off" "$term" | t_util_replace_tags "$_t_code" "$_t_code_off" '<code>' '</code>'
		t_util_wrap "$_t_def_desc" "$_t_def_desc_off" "$desc" | t_util_replace_tags "$_t_code" "$_t_code_off" '<code>' '</code>'
	}
	t_code_definition() {
		local title="$(t_util_wrap "$_t_code" "$_t_code_off" "$1")"
		t_definition "$title" "$2"
	}

}

t_init_common() {

	t_bold() {              t_util_wrap     "$_t_bold"              "$_t_bold_off"      "$@"; }
	t_italic() {            t_util_wrap     "$_t_italic"            "$_t_italic_off"    "$@"; }
	t_strike() {            t_util_wrap     "$_t_strike"            "$_t_strike_off"    "$@"; }
	t_code() {              t_util_wrap     "$_t_code"              "$_t_code_off"      "$@"; }
	t_under() {             t_util_wrap     "$_t_under"             "$_t_under_off"     "$@"; }

	t_fg_red() {            t_util_wrap     "$_t_fg_red"            "$_t_fg_off"        "$@"; }
	t_fg_green() {          t_util_wrap     "$_t_fg_green"          "$_t_fg_off"        "$@"; }
	t_fg_yellow() {         t_util_wrap     "$_t_fg_yellow"         "$_t_fg_off"        "$@"; }
	t_fg_blue() {           t_util_wrap     "$_t_fg_blue"           "$_t_fg_off"        "$@"; }
	t_fg_magenta() {        t_util_wrap     "$_t_fg_magenta"        "$_t_fg_off"        "$@"; }
	t_fg_cyan() {           t_util_wrap     "$_t_fg_cyan"           "$_t_fg_off"        "$@"; }
	t_fg_lightred() {       t_util_wrap     "$_t_fg_lightred"       "$_t_fg_off"        "$@"; }
	t_fg_lightgreen() {     t_util_wrap     "$_t_fg_lightgreen"     "$_t_fg_off"        "$@"; }
	t_fg_lightyellow() {    t_util_wrap     "$_t_fg_lightyellow"    "$_t_fg_off"        "$@"; }
	t_fg_lightblue() {      t_util_wrap     "$_t_fg_lightblue"      "$_t_fg_off"        "$@"; }
	t_fg_lightmagenta() {   t_util_wrap     "$_t_fg_lightmagenta"   "$_t_fg_off"        "$@"; }
	t_fg_lightcyan() {      t_util_wrap     "$_t_fg_lightcyan"      "$_t_fg_off"        "$@"; }

}

t_init_main() {
	case "$FORMAT" in
		terminal)
			t_init_terminal
			;;
		markdown)
			t_init_markdown
			;;
		*)
			t_init_terminal
			;;
	esac
	t_init_common
}


t_init_main
