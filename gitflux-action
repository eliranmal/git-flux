#!/usr/bin/env bash


create_branch_from_base() {
	local branch="$1"; local base_default="$2"; local base_override="$3"
	local base_branch=${base_override:-$base_default}

	validate_git_clean_working_tree
	validate_git_local_and_remote_branches_exist "$base_branch"

	git_v_checkout "$base_branch"
	git_v_pull
	git_v_ensure_branch "$branch"

	# save the base to config for the 'finish' command
	git_config_set "$(git_config_escape_subsection "branch:$branch").base" "$base_branch"
}

create_branch_from_tag() {
	local branch="$1"; local tag="$2"

	validate_git_clean_working_tree

	# fetch remote tag refs
	git_v_checkout "master"
	git_v_pull

	validate_git_tag_exists "$tag"

	git_v_checkout "$tag"
	git_v_ensure_branch "$branch"

	# save the base to config for the 'finish' command
	git_config_set "$(git_config_escape_subsection "branch:$branch").base" "$tag"
}

destroy_branch_from_base() {
	io_confirm "local and remote branches will be deleted, forever! continue?" "i knew you'd chicken out."
    io_log
    
	local branch="$1"
	local base_branch="$(git_config_get "$(git_config_escape_subsection "branch:$branch").base")"

	validate_git_clean_working_tree
	validate_git_local_branch_exists "$base_branch"

	git_v_checkout "$base_branch"
	git_v_ensure_no_branch "$branch"

	# delete the base from config, we're not gonna need it anymore
	git_config_remove_section "$(git_config_escape_subsection "branch:$branch")"
}

review_branch_from_base() {
	local branch="$1"; local base_override="$2"
	local base_default="$(git_config_get "$(git_config_escape_subsection "branch:$branch").base")"
	local base_branch=${base_override:-$base_default}

	validate_git_clean_working_tree
	validate_git_local_and_remote_branches_exist "$branch"	
	validate_git_local_and_remote_branches_exist "$base_branch"

	hub_ensure_authenticated
	hub_v_create_pull_request "$branch" "$base_branch"
}

destroy_branch_from_tag() {
	io_confirm "local and remote branches will be deleted, forever! continue?" "i knew you'd chicken out."
	io_log 

	local branch="$1"
	local tag="$(git_config_get "$(git_config_escape_subsection "branch:$branch").base")"

	validate_git_clean_working_tree
	validate_git_tag_exists "$tag"

	git_v_checkout "$tag"
	git_v_ensure_no_branch "$branch"

	# delete the base from config, we're not gonna need it anymore
	git_config_remove_section "$(git_config_escape_subsection "branch:$branch")"
}

sync_branch_with_base() {
	local branch="$1"; local base_override="$2"
	local base_default="$(git_config_get "$(git_config_escape_subsection "branch:$branch").base")"
	local base_branch=${base_override:-$base_default}

	validate_git_clean_working_tree
	validate_git_local_and_remote_branches_exist "$branch"	
	validate_git_local_and_remote_branches_exist "$base_branch"

	git_v_ensure_merged "$branch" "$base_branch"
}

self_update() {
	local tag="$1"
	
	local temp_dir="$(create_temp_dir)"
	cleanup_dir_on_exit "$temp_dir"

	local ref="${tag:-master}"
	local setup_path="$temp_dir"'/setup.sh'

	hub_v_get_self_raw_content "$ref" 'bin/setup.sh' "$setup_path"
	set_executable "$setup_path"

	io_log "running the setup script with the 'update' command..."
	${setup_path} update >/dev/null 2>&1 # todo - redirect to log file
	io_status_logger $? "updated ok ($ref)" "update failed"
}
