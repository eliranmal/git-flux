#!/usr/bin/env sh

action_start() {

	local prefix="$1"
	local base_branch="$2"

	local name="$3"
	local base_branch_override="$4"
	
	local branch="$prefix$name"

	if [[ -n $base_branch_override ]]; then
		base_branch=$base_branch_override
	fi

	validate_arg "$name"
	validate_git_clean_working_tree
	
	validate_git_local_branch_not_exists "$branch"
	validate_git_remote_branch_not_exists "$branch"
	
	validate_git_local_branch_exists "$base_branch"
	validate_git_remote_branch_exists "$base_branch"

	# save the base to config for the 'finish' command
	git config --global gitflux-branch-refs."$(git_config_escape_subsection "$branch")".base "$base_branch"

	io_log_info "starting '$name'..."

	io_log "switching to base branch '$base_branch'..."
	git_checkout "$base_branch"

	io_log "updating '$base_branch' from the remote..."
	git_pull
	
	io_log "creating the '$branch' local branch and switching to it..."
	git_create_branch "$branch"

	io_log "pushing '$branch' to the remote..."
	git_push_new_branch "$branch"

	io_log_star "'$name' is started. happy coding!"
}

action_finish() {

	local prefix="$1"
	local name="$2"
	
	local branch="$prefix$name"
	local base_branch="$(git config --global gitflux-branch-refs."$(git_config_escape_subsection "$branch")".base)"

	validate_arg "$name"
	validate_git_clean_working_tree
		
	validate_git_local_branch_exists "$branch"
	validate_git_remote_branch_exists "$branch"
	
	validate_git_local_branch_exists "$base_branch"

	local answer=$(io_prompt "$name's local and remote branches will be deleted, forever. continue? (y/n)")
	if [[ $answer != "y" ]]; then
		io_status_fatal "i knew you'd chicken out."
	fi

	io_log_info "finishing '$name'..."

	io_log "switching to base branch '$base_branch'..."
	git_checkout "$base_branch"

	io_log "deleting the '$branch' local branch..."
	git_delete_local_branch "$branch"

	io_log "deleting the '$branch' remote branch..."
	git_delete_remote_branch "$branch"

	# delete the base from config, we're not gonna need it anymore
	git config --global --unset gitflux-branch-refs."$(git_config_escape_subsection "$branch")".base "$base_branch"
	
	io_log_star "'$name' is finished. RIP."
}
