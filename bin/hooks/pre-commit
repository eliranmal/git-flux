#!/usr/bin/env bash


main() {

	# redirect stderr to stdout, to ensure logs are printed anyway
	local git_root="$(git rev-parse --show-toplevel)"
	exec &> ${git_root}/pre-commit.log

	# first, stash index and work dir, keeping only the
	# to-be-committed changes in the working directory.
	local old_stash=$(git rev-parse -q --verify refs/stash)
	save_stash
	local new_stash=$(git rev-parse -q --verify refs/stash)

	# if there were no changes (e.g., `--amend` or `--allow-empty`)
	# then nothing was stashed, and we should skip everything.
	if [ "$old_stash" = "$new_stash" ]; then
	    exit 0
	fi
	
	# get real changes
	local changed_files=$(git diff --cached --name-only --diff-filter=ACDM "$(against_revision)")
	echo "changed_files: $changed_files"

	# we want to add some changes to the staged area, unstash beforehand
	restore_stash

	# set default status as success
	local status=0
	
	# look for changes in files that are known to affect the help output
	if [[ $changed_files =~ git-flux* ]]; then
		echo "there are changes in public files, rendering usage docs"
		render_usage_docs "$git_root"
		status=$?
	fi

	# exit with status from the stuff we did: nonzero prevents commit
	exit $status
}

save_stash() {
	git stash save -q --keep-index
}

restore_stash() {
	# don't let internal git-stash implementation stand in our way
	git config core.whitespace -trailing-space
	# restore changes from stash
	git reset --hard -q && git stash apply --index -q && git stash drop -q
	# restore previous config
	git config --unset core.whitespace -trailing-space
}

render_usage_docs() {
	local git_root="$1"
	# install git-flux from source to get the local changes in the help output
	${git_root}/bin/setup-dev.sh update || { return 1; }
	# render usage docs
	${git_root}/bin/usage.sh || { return 2; }
	# add change to index (stage area)
	git add -v ${git_root}/usage || { return 3; } # todo - try with '-u'
#	git commit --no-verify --amend --message='auto-generate usage docs (pre-commit hook)' ${git_root}/usage || { return 3; }
	return 0
}

against_revision() {
	local against
	if git rev-parse --verify HEAD >/dev/null 2>&1; then
		against=HEAD
	else
		# initial commit: diff against an empty tree object
		against=$(git hash-object -t tree /dev/null)
	fi
	printf "%s" "$against"
}


main
