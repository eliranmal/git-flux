#!/usr/bin/env sh


# all those unicode characters (✔, ✘ etc.) may not show in git-bash, f*** that.

io_log() {
	io_print "   " "$@"
}

io_log_ok() {
	io_print "${t_fg_green} ✔ ${t_off}" "$@"
}

io_log_info() {
	io_print "${t_fg_blue} ℹ ${t_off}" "$@"
}

io_log_banner() {
	io_print "${t_fg_blue} ★ ★ ★ ${t_off}" "${t_bold}$1${t_off}" 2 "${t_fg_blue} ★ ★ ★ ${t_off}"
}

io_log_warn() {
	io_print "${t_fg_yellow} ✘ ${t_off}" "$@" >&2
}

io_status_fatal() {
	die "$(io_print "${t_fg_red} ✘ ${t_off}" "$@")
" >&2
}

io_prompt() {
	local question="$1"; default_suggestion="$2"
	if [[ -n $default_suggestion ]]; then
		question="${question} [$default_suggestion]"
	fi
	# use -p instead of sending the question to stdout, as this function will probably be 
	# called in a $(subshell), so printing to stdout won't work as expected
	read -r -p "$(printf "${t_fg_yellow} ? ${t_off}%s " "$question")" answer
	echo "${answer:-$default_suggestion}"
}

io_confirm() {
	local question="$1"; local exit_message="$2";
	local answer=$(io_prompt "$question (y/n)")
	if [[ $answer != "y" ]]; then
		io_status_fatal "$exit_message"
	fi
}

io_print() {
	local margin="$1"; local body="$2"; local indent_level=$3; local end_margin="$4"
	local indent=""
	if [[ $indent_level =~ [123] ]]; then
		for (( n=$indent_level; n > 0; n-- )); do
			indent="   $indent"
		done
	fi
	echo "$indent$margin$body$end_margin"
}


# todo - continue this (issue #2)
io_ensure_log_path() {
	local log_path="/usr/local/var/log/git-flux"
	if [[ ! -d $log_path ]]; then
		mkdir -p "$log_path"
	fi
	err_log="$log_path/err.log"
}

io_ensure_log_path
