#!/usr/bin/env sh


working_dir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

# include common utilities first, to be able to use the text formatter with usage/long-usage messages
source "$working_dir/gitflux-common"



# indicates this git command can run from within child directories of the git repo
SUBDIRECTORY_OK="yes"

# output for stdout when calling the usage() function (can be overridden in each action)
USAGE="<init|feature|team|integration|rc|hf> [action] [-h]"

# appended to the usage output when using the `-h` flag (can be overridden in each action)
LONG_USAGE="git commands for fluent, team-oriented workflow.

available subcommands:

   ${t_bold}init${t_off}
      initialize the git-flux configuration survey.

   ${t_bold}feature${t_off}
      handle feature level actions.

   ${t_bold}team${t_off}
      handle team level actions.

   ${t_bold}integration${t_off}
      handle the sync of the integration branch.

   ${t_bold}rc${t_off}
      handle starting and finishing release-candidate branches.

   ${t_bold}hf${t_off}
      handle starting and finishing hot-fix branches.

please refer to each subcommand's help menu for an in-depth description of its actions (e.g. 'git flux init -h').
 "


main() {
	
	# a little nice backdoor for debugging :)
	if [[ $1 = "debug" ]]; then
		set -x; shift
	fi

	local sub_command="$1";

	# lose the sub-command arg only if it's not an `-h` flag, to not break long-usage
	[[ -n $1 && $1 != "-h" ]] && shift

	# verify the sub-command script exists, and include it
	if [[ -e "$working_dir/git-flux-$sub_command" ]]; then
		source "$working_dir/git-flux-$sub_command"
	fi

	local action="$1";

	# lose the action arg only if it's not an `-h` flag, to not break long-usage
	[[ -n $1 && $1 != "-h" ]] && shift

	if [[ -z $action ]]; then
		action="default"
	fi

	# include git builtin library 
	# this script have to be sourced after sourcing the sub-command script, to allow it to override USAGE/LONG_USAGE
	# note that usage() expects the first script argument to be `-h` when called, so shifting arguments can change the result
	source "$(git --exec-path)/git-sh-setup"

	# verify the action function is available
	if ! is_available "cmd_$action"; then
		usage
	fi

	# validate action prerequisites
	if [[ $sub_command != "init" ]]; then
		validate_git_flux_initialized
	fi

	# delegate to the sub-command action api
	cmd_${action} "$@"
}

main "$@"
