#!/usr/bin/env bash


working_dir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")

# include common utilities first, to be able to use the text formatter with usage/long-usage messages
source "$working_dir/gitflux-common"



# indicates this git command can run from within child directories of the git repo
SUBDIRECTORY_OK="yes"

# output for stdout when calling the usage() function (can be overridden in each action)
USAGE="init|feature|team|integration|rc|hf|version|update [<action>] [<action-args>...] [-h]"

# appended to the usage output when using the `-h` flag (can be overridden in each action)
LONG_USAGE="\
$(f_heading "git-flux")

git commands for fluent, collaborative workflow.


$(f_subheading "flags")

$(f_code_definition \
"-h" \
"shows the f***ing manual. works everywhere, and context dependent.
this means you can $(f_code "git flux -h"), and also $(f_code "git flux feature -h") \
or $(f_code "git flux feature start -h").")


$(f_subheading "available subcommands")

$(f_code_definition \
"init" \
"configure the git-flux environment with an interactive survey.")

$(f_code_definition \
"$(f_fg_blue "feature")" \
"handle feature level actions.")

$(f_code_definition \
"$(f_fg_yellow "team")" \
"handle integration across team members and their features.")

$(f_code_definition \
"$(f_fg_magenta "integration")" \
"handle integration across teams.")

$(f_code_definition \
"$(f_fg_green "rc")" \
"handle lifecycle of release-candidates.")

$(f_code_definition \
"$(f_fg_red "hf")" \
"handle lifecycle of hot-fixes.")

$(f_code_definition \
"version" \
"you guessed it. shows the version.")

$(f_code_definition \
"update" \
"$(f_fg_rainbow "auto-magically") updates git-flux.")


refer to each subcommand's help menu for an in-depth description of its actions (e.g. $(f_code "git flux init -h")).
 "
# ^ single space on the last line of long-usage is used to add a line-break


main() {

	# a little nice backdoor for debugging :)
	if [[ $1 = "debug" ]]; then
		set -x; shift
	fi

	local sub_command="$1";

	# lose the sub-command arg only if it's not a `-h` flag, to not break long-usage
	[[ -n $1 && $1 != '-h' ]] && shift

	# verify the sub-command script exists, and include it
	if [[ -e "$working_dir/git-flux-$sub_command" ]]; then
		source "$working_dir/git-flux-$sub_command"
	fi

	local action

	# lose the action arg only if it's not a `-h` flag, to not break long-usage, 
	# also check for the action function availability, to allow parameters on 'default' actions
	if [[ -n $1 && $1 != '-h' ]] && is_available "cmd_$1"; then
		action="$1"; shift
	else
		action="default"
	fi

	# explicitly override usage/long-usage from the loaded sub-command per action
	if is_available "cmd_usage_$action"; then
		USAGE="$sub_command $(cmd_usage_${action})"
	fi
	if is_available "cmd_long_usage_$action"; then
		LONG_USAGE="$(cmd_long_usage_${action})"
	fi

	# include git builtin library 
	# this script have to be sourced after overriding USAGE/LONG_USAGE.
	# note that to output long-usage, usage() expects the first script argument to be `-h` when called, 
	# so shifting arguments can change the result.
	source "$(git --exec-path)/git-sh-setup"

	# verify the action function is available
	if ! is_available "cmd_$action"; then
		usage
	fi

	# validate action prerequisites
	if [[ $sub_command = "init" ]]; then
		require_non_empty_repository
	else
		require_gitflux_initialized
	fi

	# delegate to the sub-command action api
	cmd_${action} "$@"
}


main "$@"
