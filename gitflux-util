#!/usr/bin/env bash


has() {
	local item=$1; shift
	grep -q "$(escape "$item")" <<< "$@"
}

is() {
	[[ -n $1 ]]
}

escape() {
	sed 's/\([\.\$\*]\)/\\\1/g' <<< "$1"
}

is_available() {
	type "$1" >/dev/null 2>&1
}

is_os_unix() {
	# linux / mac
	[[ $OSTYPE = "linux-gnu" || $OSTYPE = "darwin"* ]]
}

is_os_msys() {
	# windows (mingw)
	[[ $OSTYPE = "msys" ]]
}

is_dir() {
	[[ -d $1 ]]
}

repeat() {
	local term="$1"
	# shellcheck disable=SC2034
	local times=$2
	local n
	local str=""
	for (( n=times; n > 0; n-- )); do
		str="$str$term"
	done
	printf "%s" "$str"
}

set_executable() {
	if is_os_unix; then
		chmod +x "$1" >/dev/null 2>&1
	fi
}

create_temp_dir() {
	mktemp -d 2>/dev/null || mktemp -d -t 'git-flux'
}

# responsibly handle cleanup of the temporary directories
cleanup_dir_on_exit() {
	trap 'rm -rf '"$@"' >/dev/null 2>&1' EXIT
}

url_last_path_seg() {
	sed -e 's,.*[/:]\([^/]*\)/[^/]*$,\1,'
}

url_domain() {
	sed -e 's,[^:/]*://\([^/]*\)/.*$,\1,'
}

json_get() {
	json_select '["'"$1"'"]'
}

json_select() {
	local selector="$1"	
	# check node is available
	if hash node 2>/dev/null; then
		local src='
			var data=JSON.parse(process.argv[1] || "{}");
			var val=data'"$selector"';
			console.log(typeof val === "undefined" ? "" : typeof val === "string" ? val : JSON.stringify(val));
		'
		node -e "$src" "$(cat -)" 2>/dev/null
	fi
}

# narrow implementation: only escapes '\', '"' and new-lines
json_escape_string() {
	local str="$1"
	str="$(echo "$str" | sed -e '0N' -e 's,\(["\]\),\\\1,g')"
	printf "%s" "${str//$'\n'/\n}"
}
