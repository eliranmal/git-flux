#!/usr/bin/env sh

# todo - consider if/when updating from the team *remote* should be done. look for these:
# todo - git checkout "$(git config --global le-gitflow.branch.team)" && git pull

USAGE="feature <start|stop> [branch]"
LONG_USAGE="---"


cmd_start() {
	start "$@"
}

cmd_stop() {
	stop "$@"
}

cmd_update() {
	update "$@"
}


start() {

	validate_command "$1"

	local feature_branch="$(echo $1 | lower_dashes | prefix_feature_branch)"

	if git_local_branch_exists "$feature_branch"; then
		fatal "local branch '$feature_branch' already exists, what the damn hell are you doing?"
	fi

	# switch to team branch and update from the remote
	git checkout "$(git config --global le-gitflow.branch.team)" >/dev/null 2>&1 && git pull >/dev/null 2>&1
	
	# create the feature branch
	git checkout -b "$feature_branch" >/dev/null 2>&1
	
	# push the feature branch to the remote
	git push --set-upstream origin "$feature_branch" >/dev/null 2>&1
}

stop() {
	
	validate_command "$1"

	printf "this will delete the feature's local and remote branches, continue? (y/n) "; read answer
	if [[ $answer = "y" ]]; then

		local feature_branch="$(echo $1 | lower_dashes | prefix_feature_branch)"

		# switch to the team branch and update from the remote
		git checkout "$(git config --global le-gitflow.branch.team)" >/dev/null 2>&1 && git pull >/dev/null 2>&1

		# delete local branch
		if git_local_branch_exists "$feature_branch"; then
			git branch -D "$feature_branch" >/dev/null 2>&1
		fi

		# delete remote branch
		if git_remote_branch_exists "origin/$feature_branch"; then
			git push --progress origin :"$feature_branch" >/dev/null 2>&1
		fi
		
		ok "feature '$1' was stopped. RIP."
	else
		fatal "i knew you'd chicken out."
	fi
}

update() {

	validate_command "$1"

	local feature_branch="$(echo $1 | lower_dashes | prefix_feature_branch)"

	if ! git_local_branch_exists "$feature_branch"; then
		fatal "feature branch '$feature_branch' does not exist locally, cannot update from team branch."
	fi

	# switch to the team branch and update from the remote
	git checkout "$(git config --global le-gitflow.branch.team)" >/dev/null 2>&1 && git pull >/dev/null 2>&1
	
	# switch to the feature branch
	git checkout "$feature_branch" >/dev/null 2>&1

    git merge --no-edit --no-ff "$(git config --global le-gitflow.branch.team)" >/dev/null 2>&1
}

prefix_feature_branch() {
	local prefix="$(git config --global le-gitflow.branch-prefix.feature)"
	local feature="$(input_from_arg_or_stdin $1)"
	echo "$prefix$feature"
}
