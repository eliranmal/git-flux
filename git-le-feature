#!/usr/bin/env sh


USAGE="feature <start|stop> [branch]"
LONG_USAGE=""


cmd_start() {
	start "$(escape_branch_name $1)"
}

cmd_stop() {
	stop "$(escape_branch_name $1)"
}

cmd_update() {
	update "$(escape_branch_name $1)"
}


start() {

	validate "$1"

	local feature_branch="$(prefix_feature_branch $1)"
	if git_local_branch_exists "$feature_branch"; then
		fatal "local branch '$feature_branch' already exists, what the damn hell are you doing?"
	fi

	# todo - consider if/when updating from the team *remote* should be done
	# switch to team branch and update from the remote
	git checkout "$(git config --global le-gitflow.branch.team)" && git pull
	
	# create the feature branch
	git checkout -b "$feature_branch"
	
	# push the feature branch to the remote
	git push --set-upstream origin "$feature_branch"
}

stop() {
	
	validate "$1"

	printf "stopping feature '$1' will delete its local and remote branches, continue? (y/n) "; read answer
	if [[ $answer = "y" ]]; then

		local feature_branch="$(prefix_feature_branch $1)"

		# todo - consider if/when updating from the team *remote* should be done
		# switch to team branch and update from the remote
		git checkout "$(git config --global le-gitflow.branch.team)" && git pull

		# delete local branch
		if git_local_branch_exists "$feature_branch"; then
			git branch -D "$feature_branch"
		fi

		# delete remote branch
		if git_remote_branch_exists "origin/$feature_branch"; then
			git push --progress origin :"$feature_branch"
		fi
		
		ok "feature '$1' was stopped. RIP."
	else
		fatal "i knew you'd chicken out."
	fi
}

update() {

	validate "$1"

	local feature_branch="$(prefix_feature_branch $1)"
	if ! git_local_branch_exists "$feature_branch"; then
		fatal "feature branch '$feature_branch' does not exist locally, cannot update from team branch."
	fi
	
	# todo - don't be petty: try to switch to the requested branch (and perhaps switch back)
	local current_branch="$(git_current_branch)";
	if [[ $current_branch != $feature_branch ]]; then
		fatal "current branch '$current_branch' is not the requested feature branch ('$feature_branch'). \
		switch back to your feature branch before updating from the team branch."
	fi

    git merge --no-edit --no-ff "$(git config --global le-gitflow.branch.team)"
}

validate() {

	if [[ -z $1 ]]; then
		usage
	fi

	validate_le_gitflow_initialized

	validate_git_clean_working_tree
}

prefix_feature_branch() {
	echo "$(git config --global le-gitflow.branch-prefix.feature)$1"
}
