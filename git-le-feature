#!/usr/bin/env sh


# todo - consider if/when updating from the team *remote* should be done

USAGE="feature <start|stop|update|push|pull> [branch] [-h]"
LONG_USAGE="---"


cmd_start() {
	start "$@"
}

cmd_stop() {
	stop "$@"
}

cmd_update() {
	update "$@"
}

cmd_push() {
	push "$@"
}

cmd_pull() {
	pull "$@"
}


start() {
	echo "starting feature '$1'..."

	validate_feature_action "$1"

	local feature_branch="$(echo "$1" | lower_dashes | prefix_feature_branch)"
	echo "feature branch name: '$feature_branch'."

	validate_git_local_branch_not_exists "$feature_branch"
	validate_git_remote_branch_not_exists "$feature_branch"

	local team_branch="$(git config --global le-gitflow.branch.team)"
	echo "team branch name: '$team_branch'."

	echo "switching to the team branch and updating from the remote..."
	git checkout "$team_branch" >/dev/null 2>&1 && git pull >/dev/null 2>&1
	
	echo "creating the local feature branch and switching to it..."
	git checkout -b "$feature_branch" >/dev/null 2>&1
	
	echo "pushing the feature branch to the remote..."
	git push --set-upstream origin "$feature_branch" >/dev/null 2>&1

	ok "feature '$1' was started. happy coding!"
}

stop() {
	echo "stopping feature '$1'..."
	
	validate_feature_action "$1"

	local feature_branch="$(echo "$1" | lower_dashes | prefix_feature_branch)"
	echo "feature branch name: '$feature_branch'."

	validate_git_local_branch_exists "$feature_branch"
	validate_git_remote_branch_exists "$feature_branch"

	printf "the feature's local and remote branches will be deleted, so make sure your work is merged. continue? (y/n) "; read answer
	if [[ $answer != "y" ]]; then
		fatal "i knew you'd chicken out."
	fi

	local team_branch="$(git config --global le-gitflow.branch.team)"
	echo "team branch name: '$team_branch'."

	echo "switching to the team branch and updating from the remote..."
	git checkout "$team_branch" >/dev/null 2>&1 && git pull >/dev/null 2>&1

	echo "deleting the feature's local branch..."
	git branch -D "$feature_branch" >/dev/null 2>&1

	echo "deleting the feature's remote branch..."
	git push origin :"$feature_branch" >/dev/null 2>&1
	
	ok "feature '$1' was stopped. RIP."
}

update() {
	echo "updating feature '$1'..."

	validate_feature_action "$1"

	local feature_branch="$(echo "$1" | lower_dashes | prefix_feature_branch)"
	echo "feature branch name: '$feature_branch'."

	validate_git_local_branch_exists "$feature_branch"

	local team_branch="$(git config --global le-gitflow.branch.team)"
	echo "team branch name: '$team_branch'."

	echo "switching to the team branch and updating from the remote..."
	git checkout "$team_branch" >/dev/null 2>&1 && git pull >/dev/null 2>&1
	
	echo "switching back to the feature branch..."
	git checkout "$feature_branch" >/dev/null 2>&1

	echo "merging changes from the team branch..."
	git merge --no-edit --no-ff "$team_branch" >/dev/null 2>&1

	ok "feature '$1' was updated."
}

push() {
	echo "pushing feature '$1'..."

	validate_feature_action "$1"

	local feature_branch="$(echo "$1" | lower_dashes | prefix_feature_branch)"
	echo "feature branch name: '$feature_branch'."

	validate_git_remote_branch_exists "$feature_branch"
	
	echo "pushing local changes to the feature's remote branch..."
	git push origin refs/heads/"$feature_branch":"$feature_branch" >/dev/null 2>&1

	ok "feature '$1' was pushed."
}

pull() {
	fatal "todo!"
}


prefix_feature_branch() {
	local prefix="$(git config --global le-gitflow.branch-prefix.feature)"
	local feature="$(input_from_arg_or_stdin "$1")"
	echo "$prefix$feature"
}

validate_feature_action() {
	validate_arg "$1"
	validate_git_clean_working_tree
}
