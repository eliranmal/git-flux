#!/usr/bin/env bash


cmd_usage_default() {
	printf "start|finish|sync|review <name> [<base>] [-h]"
}

cmd_usage_start() {
	printf "start <name> [<base>] [-h]"
}

cmd_usage_finish() {
	printf "finish <name> [-h]"
}

cmd_usage_sync() {
	printf "sync <name> [-h]"
}

cmd_usage_review() {
	printf "review <name> [-h]"
}

cmd_long_usage_default() {
	printf "\
$(f_heading "feature" | f_fg_blue)

handle feature level actions.


$(f_subheading "available actions")

$(cmd_long_usage_start)
$(cmd_long_usage_finish)
$(cmd_long_usage_sync)
$(cmd_long_usage_review)
"
}

cmd_long_usage_start() {
	printf "\
$(f_code_definition \
"$(cmd_usage_start)" \
"start a new feature; create a local branch and push it to the remote.
the branch name will be composed of the pre-configured feature prefix and the passed $(f_code "name").
pass an optional $(f_code "base") to set a custom base for the branch (default $(f_code "base") is the current team branch).")
 "
}

cmd_long_usage_finish() {
	printf "\
$(f_code_definition \
"$(cmd_usage_finish)" \
"finish an existing feature; delete its local and remote branches, for good.")
 "
}

cmd_long_usage_sync() {
	printf "\
$(f_code_definition \
"$(cmd_usage_sync)" \
"sync an existing feature with its base branch, usually the current team branch, unless otherwise set when the feature was started.")
 "
}

cmd_long_usage_review() {
	printf "\
$(f_code_definition \
"$(cmd_usage_review)" \
"open a pull request from the feature branch to its base branch, for review in github.")
 "
}


cmd_start() {
	require_args "$1"
	local team_branch="$(git_config_get "branch.team")"
	if [[ -z $team_branch && -z $2 ]]; then
		io_log; io_status_fatal "no base found!
      set up a team first with 'git flux team create', or pass the desired base to this command."
	fi
	io_log; create_branch_from_base "$(git_config_get "prefix.feature")$1" "$team_branch" "$2"
	io_log; io_log_ok "feature '$1' is started. happy coding!"; io_log
}

cmd_finish() {
	require_args "$1"
	io_log; destroy_branch_from_base "$(git_config_get "prefix.feature")$1"
	io_log; io_log_ok "feature '$1' is finished. RIP."; io_log
}

cmd_sync() {
	require_args "$1"
	io_log; sync_branch_with_base "$(git_config_get "prefix.feature")$1"
	io_log; io_log_ok "feature '$1' is in sync with the base."; io_log
}

cmd_review() {
	require_args "$1"
	io_log; review_branch_from_base "$(git_config_get "prefix.feature")$1"
	io_log; io_log_ok "feature '$1' is ready for review."; io_log
}
