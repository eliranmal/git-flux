#!/usr/bin/env sh


cmd_usage_default() {
	printf "<start|finish> <name> [tag]"
}

cmd_usage_start() {
	printf "start <name> <tag>"
}

cmd_usage_finish() {
	printf "finish <name>"
}

cmd_long_usage_default() {
	printf "\
${t_bold}${t_fg_red}hf${t_off}
--

handle lifecycle of hot-fixes.


${t_under}available actions${t_off}

$(cmd_long_usage_start)
$(cmd_long_usage_finish)
"
}

cmd_long_usage_start() {
	printf "\
   ${t_bold}$(cmd_usage_start)${t_off}
      start a hot-fix; create a local branch and push it to the remote.
      the branch name will be composed of the pre-configured hot-fix prefix and the passed ${t_bold}name${t_off}.
      the passed ${t_bold}tag${t_off} will be used as the branch base.
 "
}

cmd_long_usage_finish() {
	printf "\
   ${t_bold}$(cmd_usage_finish)${t_off}
      finish an existing release-candidate; delete its local and remote branches, for good.
 "
}

cmd_start() {
	require_args "$1" "$2"
	io_log; create_branch_from_tag "$(git_config_get "prefix.hf")$1" "$2"
	io_log; io_log_ok "hot-fix '$1' is started. good luck!"; io_log
}

cmd_finish() {
	require_args "$1"
	io_log; destroy_branch_from_tag "$(git_config_get "prefix.hf")$1"
	io_log; io_log_ok "hot-fix '$1' is finished. goodbye!"; io_log
}
