#!/usr/bin/env sh


USAGE="team <create|destroy|sync|join> <name> [-h]"

LONG_USAGE="
${t_bold}${t_fg_yellow}team${t_off}
----

handle team level actions.


${t_bold}available actions:${t_off}

   ${t_bold}create <name>${t_off}
      start a new team; create a local branch and push it to the remote.
      the branch name will be composed of the pre-configured team prefix and the passed ${t_bold}name${t_off}.
      aliases: ${t_bold}assemble${t_off}, ${t_bold}gather${t_off}, ${t_bold}huddle${t_off}.

   ${t_bold}destroy <name>${t_off}
      destroy an existing team; delete its local and remote branches, for good.
      aliases: ${t_bold}disassemble${t_off}, ${t_bold}scatter${t_off}, ${t_bold}break${t_off}.

   ${t_bold}sync <name>${t_off}
      sync an existing team with its base branch (the integration branch).

   ${t_bold}join <name>${t_off}
      join a team for the first time, or switch teams to another team.
      after this, all new features will be based on the new team.
      aliases: ${t_bold}switch${t_off}.
 "


# aliases 

cmd_assemble() { cmd_create "$@"; }
cmd_gather() { cmd_create "$@"; }
cmd_huddle() { cmd_create "$@"; }
cmd_disassemble() { cmd_destroy "$@"; }
cmd_scatter() { cmd_destroy "$@"; }
cmd_break() { cmd_destroy "$@"; }
cmd_switch() { cmd_join "$@"; }


cmd_create() {
	validate_mandatory_arg "$1"
	io_log "creating team '$1'..."
	local branch="$(git_config_get "prefix.team")$1"
	create_branch_from_base "$branch" "$(git_config_get "branch.integration")"
	git_config_set "branch.team" "$branch"
	io_log_ok "team '$1' is created. congrats!"
}

cmd_destroy() {
	# todo - what to do after team is destroyed? move to another team? 
	# todo - probably should lookup if other teams are available, and if not, delete the branch.team ref from config
	validate_mandatory_arg "$1"
	io_confirm "the local and remote branches of '$1' will be deleted, forever! continue?" "i knew you'd chicken out."
	io_log "destroying team '$1'..."
	destroy_branch_from_base "$(git_config_get "prefix.team")$1"
	io_log_ok "team '$1' is destroyed. so long!"
}

cmd_sync() {
	validate_mandatory_arg "$1"
	io_log "syncing '$1' with the base..."
	sync_branch_with_base "$(git_config_get "prefix.team")$1"
	io_log_ok "team '$1' is in sync with the base."
}

cmd_join() {
	validate_mandatory_arg "$1"
	io_log "switching teams..."

	local prefix="$(git_config_get "prefix.team")"
	local new_team_branch="$prefix$1"
	local old_team_branch="$(git_config_get "branch.team")"
	local new_team="$1"
	local old_team="$(strip_prefix "$old_team_branch" "$prefix")"

	validate_git_local_and_remote_branches_exist "$new_team_branch"
	
	if [[ $new_team_branch = $old_team_branch ]]; then
		io_status_fatal "'$new_team' is the current team, nothing to do."
	fi

	# todo - should this block be used in 'finish' as well?
	# relevant when switching teams, not when joining a team for the first time
	if [[ -n $old_team_branch ]]; then
		validate_git_local_and_remote_branches_exist "$old_team_branch"
		
		local old_team_feature_branches="$(git_config_get_subsections_by_value "base" "$old_team_branch" "branch:")"
		if [[ -n $old_team_feature_branches ]]; then
			# strip prefix to get the team name
			io_log_info "feature branches of the '$old_team' team were found:"
			io_log "$old_team_feature_branches" 1
			io_confirm "ignore them and continue?" "aborting, see ya later."
		fi
	fi

	io_log "leaving '$old_team', joining '$new_team'..."

	git_checkout "$new_team_branch"
	git_config_set "branch.team" "$new_team_branch"

	io_log_ok "team switched. welcome aboard!"
}
